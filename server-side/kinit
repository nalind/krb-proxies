# Copyright (C) 2013, Red Hat, Inc.
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.

#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.

#   Neither the name of Red Hat, Inc., nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import base64
import os
import socket
from pyasn1.type import univ, char, namedtype, tag
from pyasn1.codec.ber import encoder, decoder

kdcAddr = ("localhost", 88)

class proxy_message_kerb_message(univ.OctetString):
  tagSet = univ.OctetString.tagSet.tagExplicitly(
       tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0)
  )
class proxy_message_target_domain(char.GeneralString):
  tagSet = char.GeneralString.tagSet.tagExplicitly(
       tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)
  )
class proxy_message_dclocate_hint(univ.Integer):
  tagSet = univ.Integer.tagSet.tagExplicitly(
       tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)
  )
class proxy_message(univ.Sequence):
  componentType = namedtype.NamedTypes(
    namedtype.NamedType('message', proxy_message_kerb_message()),
    namedtype.OptionalNamedType('realm', proxy_message_target_domain()),
    namedtype.OptionalNamedType('flags', proxy_message_dclocate_hint())
  )

def application(env, start_response):
  method = env["REQUEST_METHOD"].upper()
  if method != "POST":
    start_response("405 Method Not Allowed", [("Content-Type", "text/plain"),
                                              ("Allow", "POST")])
    return ["I don't know what that is!\r\nDumping env:\r\n%s\r\n" % str(env)]

  (req,err) = decoder.decode(env["wsgi.input"].read(), asn1Spec=proxy_message())
  if err != '':
    start_response("400 Bad Request", [("Content-Type", "text/plain")])
    return ["There was an error parsing the request.\r\n"]

  kdc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
  kdc.connect(kdcAddr)
  kdc.sendall(req.getComponentByName('message').asOctets())
  reply = kdc.recv(1048576)
  kdc.close()

  rep = proxy_message()
  rep.setComponentByName('message',reply)
  encoded_rep = encoder.encode(rep)
  start_response("200 OK", [("Content-Type", "application/kerberos"),
                            ("Content-Length", str(len(encoded_rep)))])
  return [encoded_rep]
